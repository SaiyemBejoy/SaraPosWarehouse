@model PosWarehouse.ViewModel.PeriodicalStockReportModel
@{
    ViewBag.Title = "PeriodicalStock";
}

<div class="row margin-top-10">
    <div class="col-md-12">
        <div class="portlet box green">
            <div class="portlet-title">
                <div class="caption">
                    <i class="fa fa-gift"></i>Stock Summary
                </div>
                <div class="tools">
                    <a href="javascript:;" class="collapse" data-original-title="" title="">
                    </a>
                </div>
            </div>
            <div class="portlet-body">
                @using (Html.BeginForm("PeriodicalStock", "AllReport", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-body">
                        <div class="row">
                            <div class="col-md-1 text-center">
                                <div class="form-group">
                                    <div class="radio-list">
                                        @Html.RadioButtonFor(model => model.ReportType, "PDF", new { @checked = true })<strong>PDF</strong>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-1">
                                @*<div class="radio-list">
                                    <label>
                                        @Html.RadioButtonFor(model => model.ReportType, "Excel") <strong>Excel</strong>
                                    </label>

                                </div>*@
                            </div>
                            <div class="col-md-3">
                            </div>
                            <div class="col-md-4">
                                @Html.CheckBoxFor(m => m.CheckBox, new { @class = "checkbox" }) <strong>Warehouse Stock</strong>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="row">
                                    <div class="form-group">
                                        @Html.LabelFor(c => c.FromDate, new { @class = "col-md-3 control-label" })
                                        <div class="col-md-6">
                                            <div class="input-icon">
                                                <i class="fa fa-text-width"></i>
                                                @*@{Html.EnableClientValidation(false);}*@
                                                @Html.TextBoxFor(c => c.FromDate, new { @class = "form-control input-circle datepicker", @autocomplete = "off", @readonly = "true" })
                                            </div>
                                        </div>
                                        <div class="col-md-3"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(c => c.ToDate, new { @class = "col-md-3 control-label" })
                                        <div class="col-md-6">
                                            <div class="input-icon">
                                                <i class="fa fa-text-width"></i>
                                                @*@{Html.EnableClientValidation(false);}*@
                                                @Html.TextBoxFor(c => c.ToDate, new { @class = "form-control input-circle datepicker", @autocomplete = "off", @readonly = "true" })
                                            </div>
                                        </div>
                                        <div class="col-md-3"></div>
                                    </div>
                                    <div class="form-group ShopDiv">
                                        @Html.LabelFor(c => c.ShopId, new { @class = "col-md-3 control-label" })
                                        <div class="col-md-6">
                                            <div class="input-icon">
                                                <i class="fa fa-text-width"></i>
                                                @*@{Html.EnableClientValidation(false);}*@
                                                @Html.DropDownListFor(c => c.ShopId, new SelectList(ViewBag.ShopList, "Value", "Text"), new { @class = "form-control input-circle" })
                                            </div>
                                        </div>
                                        <div class="col-md-3"></div>
                                    </div>
                                    <div class="form-group WarehouseDiv">
                                        @Html.LabelFor(c => c.WarehouseId, new { @class = "col-md-3 control-label" })
                                        <div class="col-md-6">
                                            <div class="input-icon">
                                                <i class="fa fa-text-width"></i>
                                              
                                                @Html.DropDownListFor(c => c.WarehouseId, new SelectList(ViewBag.WarehouseName, "Value", "Text"), new { @class = "form-control input-circle" })
                                            </div>
                                        </div>
                                        <div class="col-md-3"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(c => c.CategoryId, new { @class = "col-md-3 control-label" })
                                        <div class="col-md-6">
                                            <div class="input-icon">
                                                <i class="fa fa-text-width"></i>
                                                @{Html.EnableClientValidation(false);}
                                                @Html.DropDownListFor(c => c.CategoryId, new SelectList(ViewBag.CategoryList, "Value", "Text"), new { @class = "form-control input-circle" })
                                            </div>
                                        </div>
                                        <div class="col-md-3"></div>
                                    </div>
                                    <div class="form-group">

                                        @Html.LabelFor(c => c.SubCategoryId, new { @class = "col-md-3 control-label" })
                                        <div class="col-md-6">
                                            <div class="input-icon">
                                                <i class="fa fa-text-width"></i>
                                                @{Html.EnableClientValidation(false);}
                                                @Html.DropDownListFor(m => m.SubCategoryId, new SelectList(" "), new { @class = "form-control input-circle", @disabled = true })
                                            </div>
                                        </div>
                                        <div class="col-md-3"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(c => c.StyleName, new { @class = "col-md-3 control-label" })
                                        <div class="col-md-6">
                                            <div class="input-icon">
                                                <i class="fa fa-text-width"></i>
                                                @Html.DropDownListFor(m => m.StyleName, new SelectList(" "), new { @class = "form-control input-circle", @disabled = true })
                                            </div>
                                        </div>
                                        <div class="col-md-3"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(c => c.Barcode, new { @class = "col-md-3 control-label" })
                                        <div class="col-md-6">
                                            <div class="input-icon">
                                                <i class="fa fa-text-width"></i>
                                                @{Html.EnableClientValidation(false);}
                                                @Html.DropDownListFor(m => m.Barcode, new SelectList(" "), new { @class = "form-control input-circle", @disabled = true })
                                            </div>
                                        </div>
                                        <div class="col-md-3"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(c => c.DesignerName, new { @class = "col-md-3 control-label" })
                                        <div class="col-md-6">
                                            <div class="input-icon">
                                                <i class="fa fa-text-width"></i>
                                                @{Html.EnableClientValidation(false);}
                                                @Html.DropDownListFor(m => m.DesignerName, new List<SelectListItem>(), "---Select Name---", new { @class = "form-control input-circle", @disabled = true })
                                            </div>
                                        </div>
                                        <div class="col-md-3"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(c => c.MerchandiserName, new { @class = "col-md-3 control-label" })
                                        <div class="col-md-6">
                                            <div class="input-icon">
                                                <i class="fa fa-text-width"></i>
                                                @{Html.EnableClientValidation(false);}
                                                @Html.DropDownListFor(m => m.MerchandiserName, new List<SelectListItem>(), "---Select Name---", new { @class = "form-control input-circle", @disabled = true })
                                            </div>
                                        </div>
                                        <div class="col-md-3"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3"></div>
                            <div class="col-md-6 text-left">

                                <button class="btn btn-success" type="submit" formtarget="_blank"><i class="fa fa-save"></i> Show</button>
                                @*<button class="btn btn-success" type="submit" id="clear"><i class="fa fa-save"></i> clear2</button>*@
                                <a class="btn btn-danger" href="@Url.Action("PeriodicalStock", "AllReport")"><i class="fa fa-cut"></i> Clear</a>
                            </div>
                            <div class="col-md-3"></div>
                        </div>
                    </div>
                }

            </div>

        </div>

    </div>
</div>
@Scripts.Render("~/bundles/jqueryval")

<script>
    $(document).ready(function () {
        $(".WarehouseDiv").hide();

        $(function() {
            $( ".datepicker" ).datepicker({
                format: 'dd/mm/yyyy',//check change
                changeMonth: true,
                changeYear: true
            }).datepicker("setDate", new Date());
        });
       
        $.ajax({
            type: 'GET',
            url: 'http://192.168.2.226/Api/Designer',
            dataType: 'json',
            success: function (data) {
                $("#DesignerName").attr("disabled", false);
                $.each(data, function (i, designerId) {
                    $("#DesignerName").append('<option value="' + designerId.id + '">' + designerId.name + '</option>');
                });
            },
            error: function (ex) { alert('Failed to retrieve Designer Name List.' + ex); }
        });
        $.ajax({
            type: 'GET',
            url: 'http://192.168.2.226/Api/Merchandiser',
            dataType: 'json',
            success: function (data) {
                $("#MerchandiserName").attr("disabled", false);
                $.each(data, function (i, merchandiserId) {
                    $("#MerchandiserName").append('<option value="' + merchandiserId.id + '">' + merchandiserId.name + '</option>');
                });
            },
            error: function (ex) { alert('Failed to retrieve Merchandiser List.' + ex); }
        });

        $("#CategoryId").change(function () {
            $("#SubCategoryId").empty();
            $("#StyleName").empty();
            $("#Barcode").empty();
            var catId = $("#CategoryId").val();

            if (!isNaN(catId) && catId) {
                $("#SubCategoryId").prop("disabled", false);
                $.ajax({
                    type: 'POST',
                    url: '/AllReport/GetSubCategory/',
                    dataType: 'json',
                    data: { categoryId: catId },
                    success: function (subCategoryId) {
                        $.each(subCategoryId, function (i, subCategoryId) {
                            $("#SubCategoryId").append('<option value="' + subCategoryId.Value + '">' + subCategoryId.Text + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed to retrieve SubCategory List.' + ex);
                        $("#SubCategoryId").prop("disabled", true);
                        $("#StyleName").prop("disabled", true);
                        $("#Barcode").prop("disabled", true);
                    }
                });
            } else {
                $("#SubCategoryId").prop("disabled", true);
                $("#StyleName").prop("disabled", true);
                $("#Barcode").prop("disabled", true);
            }
        });

        $("#SubCategoryId").change(function () {
            $("#StyleName").empty();
            $("#Barcode").empty();
            var catId = $("#CategoryId").val();
            var subCatId = $("#SubCategoryId").val();

            if ((!isNaN(catId) && catId) && (!isNaN(subCatId) && subCatId)) {
                $("#StyleName").prop("disabled", false);
                $.ajax({
                    type: 'POST',
                    url: '/AllReport/GetStyleList/',
                    dataType: 'json',
                    data: { categoryId: catId, subCategoryId: subCatId },
                    success: function (style) {
                        $.each(style, function (i, style) {
                            $("#StyleName").append('<option value="' + style.Value + '">' + style.Text + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed to retrieve Style Name List.' + ex);
                        $("#StyleName").prop("disabled", true);
                        $("#Barcode").prop("disabled", true);
                    }
                });
            } else {
                $("#StyleName").prop("disabled", true);
                $("#Barcode").prop("disabled", true);
            }
        });

        $("#StyleName").change(function () {

            $("#Barcode").empty();
            var catId = $("#StyleName").val();

            if (catId && catId.length > 0) {
                $("#Barcode").prop("disabled", false);
                $.ajax({
                    type: 'POST',
                    url: '/AllReport/GetBarcodeList/',
                    dataType: 'json',
                    data: { styleName: catId },
                    success: function (barcode) {
                        $.each(barcode, function (i, barcode) {
                            $("#Barcode").append('<option value="' + barcode.Value + '">' + barcode.Text + '</option>');
                        });
                    },
                    error: function (ex) { alert('Failed to retrieve Barcode List.' + ex); }
                });
            } else {
                $("#barcode").prop("disabled", true);
            }
        });


        $(".checkbox").change(function() {
            if (this.checked) {
                $("#ShopId").val(null)
                $(".WarehouseDiv").show();
                $(".ShopDiv").hide();
            } else {
                $("#WarehouseId").val(null)
                $(".WarehouseDiv").hide();
                $(".ShopDiv").show();
            }
        });
    })
</script>

